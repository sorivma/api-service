# Main query type for fetching users and their details
type Query {
    user(userId: ID!): UserAggregate
    users: [UserAggregate]
}

# Mutation type for creating and updating
type Mutation {
    createUser(input: CreateUserInput!): UserAggregate
    addIncomingTransaction(userId: String!, transactionInput: IncomingTransactionInput!): UserAggregate
    addOutcomingTransaction(userId: String!, transactionInput: OutgoingTransactionInput!): UserAggregate
}

input CreateUserInput {
    name: String!
    email: String!
    currencyCode: String!
    accountType: AccountType!
}

input IncomingTransactionInput {
    amount: Float!
    status: TransactionStatus
    payeeId: String!
    paymentMethod: PaymentMethod!
}

input OutgoingTransactionInput {
    amount: Float!
    status: TransactionStatus
    payeeId: String!  # The recipient of the transaction
    paymentMethod: PaymentMethod!
}

# UserAggregate represents a user with their transactions and account details
type UserAggregate {
    id: ID!
    name: String!
    email: String!
    incomingTransactions: [Transaction]
    outcomingTransactions: [Transaction]
    account: Account
}

# Type for individual transactions
type Transaction {
    id: ID!
    amount: Float!
    status: TransactionStatus
    payerId: ID!
    payeeId: ID!
    paymentMethod: PaymentMethod!
}

# Type for a userâ€™s account
type Account {
    userId: ID!
    balance: Float!
    status: AccountStatus!
    accountType: AccountType!
    currencyCode: String!
}

# Enums representing the status of transactions and accounts
enum TransactionStatus {
    PENDING
    COMPLETED
}

enum AccountStatus {
    ACTIVE
    INACTIVE
}

enum AccountType {
    SAVINGS
    CHECKING
}

enum PaymentMethod {
    CREDIT_CARD
    BANK_TRANSFER
    PAYPAL
}
